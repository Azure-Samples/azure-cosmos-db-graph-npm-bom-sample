{
  "name": "@azure/amqp-common",
  "dist-tags": {
    "latest": "1.0.0-preview.6",
    "next": "1.0.0-preview.6"
  },
  "versions": [
    "0.0.1",
    "0.1.0",
    "0.1.1",
    "0.1.2",
    "0.1.3",
    "0.1.4",
    "0.1.5",
    "0.1.6",
    "0.1.7",
    "0.1.8",
    "0.1.9",
    "1.0.0-preview.1",
    "1.0.0-preview.2",
    "1.0.0-preview.3",
    "1.0.0-preview.5",
    "1.0.0-preview.6"
  ],
  "time": {
    "created": "2018-09-13T01:10:22.056Z",
    "0.0.1": "2018-09-13T01:10:22.686Z",
    "modified": "2019-07-03T18:03:48.037Z",
    "0.1.0": "2018-09-22T18:59:55.877Z",
    "0.1.1": "2018-09-26T23:17:53.893Z",
    "0.1.2": "2018-09-28T21:12:23.969Z",
    "0.1.3": "2018-10-01T20:29:40.766Z",
    "0.1.4": "2018-10-05T19:45:32.634Z",
    "0.1.5": "2018-10-17T20:20:47.792Z",
    "0.1.6": "2018-10-19T18:49:13.542Z",
    "0.1.7": "2018-10-26T01:18:15.428Z",
    "0.1.8": "2018-12-11T03:49:11.108Z",
    "0.1.9": "2018-12-15T06:37:11.255Z",
    "1.0.0-preview.1": "2019-01-16T00:07:45.642Z",
    "1.0.0-preview.2": "2019-03-22T19:48:00.159Z",
    "1.0.0-preview.3": "2019-04-22T18:34:06.044Z",
    "1.0.0-preview.4": "2019-05-08T23:42:33.925Z",
    "1.0.0-preview.5": "2019-05-09T19:50:04.929Z",
    "1.0.0-preview.6": "2019-07-03T17:55:40.563Z"
  },
  "maintainers": [
    "amarzavery <amarzavery@gmail.com>",
    "azure-sdk <azuresdkengsysadmins@microsoft.com>",
    "billytrend <billy.trend@gmail.com>",
    "mikeharder <mharder@microsoft.com>",
    "sergeyshandar <sergey.shandar@gmail.com>",
    "veronicagg <bggve@outlook.com>",
    "vladbarosan <vlad.barosan@gmail.com>"
  ],
  "description": "Common library for amqp based azure sdks like @azure/event-hubs.",
  "homepage": "https://github.com/Azure/azure-sdk-for-js/tree/%40azure/amqp-common_1.0.0-preview.5/sdk/core/amqp-common",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/azure/azure-sdk-for-js.git"
  },
  "author": "Microsoft Corporation",
  "bugs": {
    "url": "http://github.com/Azure/azure-sdk-for-js/issues"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "sdk-type": "client",
  "version": "1.0.0-preview.6",
  "main": "./dist/index.js",
  "module": "./dist-esm/src/index.js",
  "types": "./typings/src/index.d.ts",
  "dependencies": {
    "@azure/ms-rest-nodeauth": "^0.9.2",
    "@types/async-lock": "^1.1.0",
    "@types/is-buffer": "^2.0.0",
    "async-lock": "^1.1.3",
    "buffer": "^5.2.1",
    "debug": "^3.1.0",
    "events": "^3.0.0",
    "is-buffer": "^2.0.3",
    "jssha": "^2.3.1",
    "process": "^0.11.10",
    "stream-browserify": "^2.0.2",
    "tslib": "^1.9.3",
    "url": "^0.11.0",
    "util": "^0.11.1"
  },
  "browser": {
    "./dist/index.js": "./browser/index.js",
    "./dist-esm/src/index.node.js": "./dist-esm/src/index.browser.js",
    "buffer": "buffer",
    "stream": "stream-browserify"
  },
  "peerDependencies": {
    "rhea-promise": "^0.1.15"
  },
  "devDependencies": {
    "@types/chai": "^4.1.6",
    "@types/chai-as-promised": "^7.1.0",
    "@types/debug": "^0.0.31",
    "@types/dotenv": "^6.1.0",
    "@typescript-eslint/eslint-plugin": "~1.9.0",
    "@typescript-eslint/parser": "^1.7.0",
    "@types/jssha": "^2.0.0",
    "@types/mocha": "^5.2.5",
    "@types/node": "^8.0.0",
    "@types/sinon": "^5.0.5",
    "assert": "^1.4.1",
    "chai": "^4.2.0",
    "chai-as-promised": "^7.1.1",
    "cross-env": "^5.2.0",
    "dotenv": "^7.0.0",
    "eslint": "^5.16.0",
    "eslint-config-prettier": "^4.2.0",
    "eslint-detailed-reporter": "^0.8.0",
    "eslint-plugin-no-null": "^1.0.2",
    "eslint-plugin-no-only-tests": "^2.3.0",
    "eslint-plugin-promise": "^4.1.1",
    "karma": "^4.0.1",
    "karma-chrome-launcher": "^2.2.0",
    "karma-mocha": "^1.3.0",
    "mocha": "^5.2.0",
    "mocha-junit-reporter": "^1.18.0",
    "mocha-multi": "^1.0.1",
    "nyc": "^14.0.0",
    "prettier": "^1.16.4",
    "puppeteer": "^1.11.0",
    "rhea": "^1.0.4",
    "rhea-promise": "^0.1.15",
    "rimraf": "^2.6.2",
    "rollup": "~1.13.1",
    "rollup-plugin-commonjs": "^9.2.0",
    "rollup-plugin-inject": "^2.2.0",
    "rollup-plugin-json": "^3.1.0",
    "rollup-plugin-multi-entry": "^2.1.0",
    "rollup-plugin-node-globals": "^1.4.0",
    "rollup-plugin-node-resolve": "^4.2.0",
    "rollup-plugin-replace": "^2.1.0",
    "rollup-plugin-shim": "^1.0.0",
    "rollup-plugin-sourcemaps": "^0.4.2",
    "rollup-plugin-uglify": "^6.0.0",
    "sinon": "^7.1.0",
    "ts-node": "^7.0.1",
    "tslint": "^5.15.0",
    "typescript": "^3.2.2",
    "ws": "^6.2.1"
  },
  "scripts": {
    "audit": "node ../../../common/scripts/rush-audit.js && rimraf node_modules package-lock.json && npm i --package-lock-only 2>&1 && npm audit",
    "build:test": "tsc -p . && rollup -c rollup.test.config.js 2>&1",
    "build": "tsc -p . && rollup -c 2>&1",
    "check-format": "prettier --list-different --config .prettierrc.json \"src/**/*.ts\" \"test/**/*.ts\" \"*.{js,json}\"",
    "clean": "rimraf dist dist-esm typings temp browser/*.js* browser/*.zip statistics.html coverage coverage-browser test-browser .nyc_output *.tgz *.log test*.xml TEST*.xml",
    "format": "prettier --write --config .prettierrc.json \"src/**/*.ts\" \"test/**/*.ts\" \"*.{js,json}\"",
    "integration-test:browser": "echo skipped",
    "integration-test:node": "echo skipped",
    "integration-test": "npm run integration-test:node && npm run integration-test:browser",
    "lint:fix": "eslint -c ../../.eslintrc.json src test samples --ext .ts --fix",
    "lint": "eslint -c ../../.eslintrc.json src test samples --ext .ts -f node_modules/eslint-detailed-reporter/lib/detailed.js -o amqp-common-lintReport.html || exit 0",
    "pack": "npm pack 2>&1",
    "prebuild": "npm run clean",
    "test:browser": "npm run build:test && npm run unit-test:browser && npm run integration-test:browser",
    "test:node": "npm run build:test && npm run unit-test:node && npm run integration-test:node",
    "test": "npm run build:test && npm run unit-test && npm run integration-test",
    "unit-test:browser": "karma start --single-run",
    "unit-test:node": "cross-env TS_NODE_FILES=true TS_NODE_COMPILER_OPTIONS=\"{\\\"module\\\":\\\"commonjs\\\"}\" nyc --reporter=lcov --reporter=text-lcov mocha -r ts-node/register -t 50000 --reporter mocha-multi --reporter-options spec=-,mocha-junit-reporter=- ./test/**/*.spec.ts",
    "unit-test": "npm run unit-test:node && npm run unit-test:browser"
  },
  "readme": "# Azure Core AMQP client library for AMQP operations\n\nLibrary that provides common functionality for different **Azure** Javascript libraries using amqp protocol.\nSome of the common functionalities include:\n\n- CBS Auth\n- Request-Response link for sending request and receiving response over AMQP\n- Error translation of different AMQP error codes.\n- Creation of `ConnectionConfig` by parsing the connection-string\n- AMQP message header and message property transformation\n- AMQP message data transformation (encoding/decoding) that most AMQP based Azure services use for communication\n- RetryPolicy for retrying different operations\n\n## Getting started\n\n### Pre-requisite\n\n- **Node.js version: 6.x or higher.**\n- We would **still encourage you** to install the latest available LTS version at any given time from https://nodejs.org. **It is a good practice to always install the latest available LTS version of node.js.**\n- Installing node.js on **Windows or macOS** is very simple with available installers on the [node.js website](https://nodejs.org). If you are using a **linux based OS**, then you can find easy to follow, one step installation instructions over [here](https://nodejs.org/en/download/package-manager/).\n\n### Installation\n\n- Installing this library\n\n```bash\nnpm install @azure/amqp-common\n```\n\n- [`rhea-promise`](https://github.com/amqp/rhea-promise) is a peer dependency. You need to explicitly install this library as a dependency\n  in your application.\n\n### IDE\n\nThis sdk has been developed in [TypeScript](https://typescriptlang.org) and has good source code documentation. It is highly recommended to use [vscode](https://code.visualstudio.com)\nor any other IDE that provides better intellisense and exposes the full power of source code documentation.\n\n## Key concepts\n\nThis SDK houses core AMQP common related functionality in use bu Azure SDKs that use the protocol.\n\n## Examples\n\nPlease take a look at the [samples](https://github.com/Azure/azure-sdk-for-js/tree/%40azure/amqp-common_1.0.0-preview.5/sdk/core/amqp-common/samples) directory for detailed samples.\nYou can run the samples by cloning the repo or copy pasting the below sample in your sample.js file.\n\n```bash\n- git clone https://github.com/Azure/azure-sdk-for-js.git\n- cd azure-sdk-for-js/sdk/core/amqp-common\n- npm i\n- npm i -g typescript  #This is optional. However it is useful to have typescript installed globally on your box\n- npm i -g ts-node     #This is optional. However it is useful to have ts-node installed globally on your box\n# Make sure to set the environment variables and then run\n- ts-node ./samples/cbsAuth.ts\n```\n\nThe samples below are generic for EventHubs and Servicebus. You can find EventHub specific samples,\nin the [samples](https://github.com/Azure/azure-sdk-for-js/tree/%40azure/amqp-common_1.0.0-preview.5/sdk/core/amqp-common/samples) directory.\n\n## Example 1 - CBS (Claims Based Authorization Specification) example\n\nYou can find more information about cbs authorization over [here](https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-amqp-protocol-guide#claims-based-authorization).\n\nNOTE: The code block below has been later referred to as \"./cbsAuth\".\n\n```js\nconst { ConnectionContextBase, ConnectionConfig, CbsResponse } = require(\"@azure/amqp-common\");\nconst dotenv = require(\"dotenv\");\ndotenv.config(); // Optional for loading environment configuration from a .env (config) file\n\nexport const str = process.env.CONNECTION_STRING || \"\";\nexport const path = process.env.ENTITY_PATH;\nexport const connectionConfig = ConnectionConfig.create(str, path);\nconst parameters = {\n  config: connectionConfig,\n  connectionProperties: {\n    product: \"MSJSClient\",\n    userAgent: \"/js-amqp-common\",\n    version: \"0.1.0\"\n  }\n};\nexport const connectionContext = ConnectionContextBase.create(parameters);\n\n/**\n * audience The entity token audience in one of the following forms:\n *\n * - **ServiceBus**\n *    - **Sender**\n *        - `\"sb://<yournamespace>.servicebus.windows.net/<queue-name>\"`\n *        - `\"sb://<yournamespace>.servicebus.windows.net/<topic-name>\"`\n *\n *    - **Receiver**\n *         - `\"sb://<yournamespace>.servicebus.windows.net/<queue-name>\"`\n *         - `\"sb://<yournamespace>.servicebus.windows.net/<topic-name>\"`\n *\n *    - **ManagementClient**\n *         - `\"sb://<your-namespace>.servicebus.windows.net/<queue-name>/$management\"`.\n *         - `\"sb://<your-namespace>.servicebus.windows.net/<topic-name>/$management\"`.\n *\n * - **EventHubs**\n *     - **Sender**\n *          - `\"sb://<yournamespace>.servicebus.windows.net/<hubName>\"`\n *          - `\"sb://<yournamespace>.servicebus.windows.net/<hubName>/Partitions/<partitionId>\"`.\n *\n *     - **Receiver**\n *         - `\"sb://<your-namespace>.servicebus.windows.net/<event-hub-name>/ConsumerGroups/<consumer-group-name>/Partitions/<partition-id>\"`.\n *\n *     - **ManagementClient**\n *         - `\"sb://<your-namespace>.servicebus.windows.net/<event-hub-name>/$management\"`.\n */\nexport async function authenticate(audience, closeConnection = false) {\n  await connectionContext.cbsSession.init();\n  const tokenObject = await connectionContext.tokenProvider.getToken(audience);\n  const result = await connectionContext.cbsSession.negotiateClaim(audience, tokenObject);\n  console.log(`Result is: ${result}`);\n  if (closeConnection) {\n    await connectionContext.connection.close();\n    console.log(\"Successfully closed the connection.\");\n  }\n  return result;\n}\n\n//Audience is for an EventHub or ServiceBus sender.\n// You can uncomment the following line and just run this sample, if required.\n// authenticate(`${config.endpoint}${path}`).catch((err) => console.log(err));\n```\n\n## Example 2 - Send a message\n\nBuilding on the above mentioned cbs auth sample, after authentication, we can send a message to EventHub or ServiceBus.\n\n```js\nconst dotenv = require(\"dotenv\");\ndotenv.config(); // Optional for loading environment configuration from a .env (config) file\nconst { Sender, SenderOptions, EventContext, Message, Delivery } = require(\"rhea-promise\");\nconst { authenticate, connectionContext, connectionConfig, path } = require(\"./cbsAuth\");\n\nasync function main() {\n  await authenticate(`${connectionConfig.endpoint}${path}`);\n  const senderName = \"sender-1\";\n  const senderOptions = {\n    name: senderName,\n    target: {\n      // Address for EventHub Sender, it can be \"<EventHubName>\" or \"<EventHubName>/Partitions/<PartitionId>\"\n      // For ServiceBus Queue, it will be \"<QueueName>\"\n      address: `${path}`\n    },\n    onError: (context) => {\n      const senderError = context.sender && context.sender.error;\n      if (senderError) {\n        console.log(\n          \">>>>> [%s] An error occurred for sender '%s': %O.\",\n          connectionContext.connection.id,\n          senderName,\n          senderError\n        );\n      }\n    },\n    onSessionError: (context) => {\n      const sessionError = context.session && context.session.error;\n      if (sessionError) {\n        console.log(\n          \">>>>> [%s] An error occurred for session of sender '%s': %O.\",\n          connectionContext.connection.id,\n          senderName,\n          sessionError\n        );\n      }\n    }\n  };\n\n  const sender = await connectionContext.connection.createSender(senderOptions);\n  const message = {\n    body: \"Hello World!!\",\n    message_id: \"12343434343434\"\n  };\n\n  const delivery = await sender.send(message);\n  console.log(\">>>>>[%s] Delivery id: \", connectionContext.connection.id, delivery.id);\n\n  await sender.close();\n  await connectionContext.connection.close();\n}\n\nmain().catch((err) => console.log(err));\n```\n\n## Example 3 - Receiving a message\n\nBuilding on the auth sample, post authentication we can receive messages from an EventHub or ServiceBus.\n\n```js\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nconst dotenv = require(\"dotenv\");\ndotenv.config(); // Optional for loading environment configuration from a .env (config) file\nconst {\n  Receiver,\n  ReceiverOptions,\n  EventContext,\n  ReceiverEvents,\n  delay,\n  types\n} = require(\"rhea-promise\");\nconst { authenticate, connectionContext, connectionConfig, path } = require(\"./cbsAuth\");\n\nasync function main() {\n  await authenticate(`${connectionConfig.endpoint}${path}`);\n  const receiverName = \"receiver-1\";\n  const filterClause = `amqp.annotation.x-opt-enqueued-time > '${Date.now() - 3600 * 1000}'`; // Get messages from the past hour\n  const receiverAddress = `${path}/ConsumerGroups/$default/Partitions/0`; // For ServiceBus \"<QueueName>\"\n  const receiverOptions = {\n    name: receiverName,\n    source: {\n      address: receiverAddress,\n      filter: {\n        // May not be required for ServiceBus. The current example is for EventHubs.\n        \"apache.org:selector-filter:string\": types.wrap_described(filterClause, 0x468c00000004)\n      }\n    },\n    onSessionError: (context) => {\n      const sessionError = context.session && context.session.error;\n      if (sessionError) {\n        console.log(\n          \">>>>> [%s] An error occurred for session of receiver '%s': %O.\",\n          connectionContext.connection.id,\n          receiverName,\n          sessionError\n        );\n      }\n    }\n  };\n\n  const receiver = await connectionContext.connection.createReceiver(receiverOptions);\n  receiver.on(ReceiverEvents.message, (context) => {\n    console.log(\"Received message: %O\", context.message);\n  });\n  receiver.on(ReceiverEvents.receiverError, (context) => {\n    const receiverError = context.receiver && context.receiver.error;\n    if (receiverError) {\n      console.log(\n        \">>>>> [%s] An error occurred for receiver '%s': %O.\",\n        connectionContext.connection.id,\n        receiverName,\n        receiverError\n      );\n    }\n  });\n  // sleeping for 2 mins to let the receiver receive messages and then closing it.\n  await delay(120000);\n  await receiver.close();\n  await connectionContext.connection.close();\n}\n\nmain().catch((err) => console.log(err));\n```\n\n## Troubleshooting\n\nYou can set the following environment variable to get the debug logs.\n\n- Getting debug logs from the Event Hub SDK\n\n```bash\nexport DEBUG=azure:amqp-common*\n```\n\n- Getting debug logs from the Event Hub SDK and the protocol level library.\n\n```bash\nexport DEBUG=azure:amqp-common*,rhea*\n```\n\n- If you are **not interested in viewing the message transformation** (which consumes lot of console/disk space) then you can set the `DEBUG` environment variable as follows:\n\n```bash\nexport DEBUG=azure:amqp-common*,rhea*,-rhea:raw,-rhea:message,-azure:amqp-common:datatransformer\n```\n\n- If you are interested only in **errors**, then you can set the `DEBUG` environment variable as follows:\n\n```bash\nexport DEBUG=azure-amqp-common:error,rhea-promise:error,rhea:events,rhea:frames,rhea:io,rhea:flow\n```\n\n#### Logging to a file\n\n- Set the `DEBUG` environment variable as shown above and then run your test script as follows:\n  - Logging statements from you test script go to `out.log` and logging statement from the sdk go to `debug.log`.\n    ```bash\n    node your-test-script.js > out.log 2>debug.log\n    ```\n  - Logging statements from your test script and the sdk go to the same file `out.log` by redirecting stderr to stdout (&1), and then redirect stdout to a file:\n    ```bash\n    node your-test-script.js >out.log 2>&1\n    ```\n  - Logging statements from your test script and the sdk go to the same file `out.log`.\n    ```bash\n      node your-test-script.js &> out.log\n    ```\n\n# Next steps\n\nPlease take a look at Examples section above to use the package.\n\n# Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a\nContributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us\nthe rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide\na CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions\nprovided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or\ncontact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n",
  "dist": {
    "integrity": "sha512-5XJZaJGtGoPmLhFx5y0vfCXiAHksoA4fdSnHAfkgEm4krhCW1jt1LH/6aJdUwUTJe+bz6m3Pv0sG/ILG0Vd65g==",
    "shasum": "c2bf0e29725f4548f0a8fdd3a8525d72c1ed4dfe",
    "tarball": "https://registry.npmjs.org/@azure/amqp-common/-/amqp-common-1.0.0-preview.6.tgz",
    "fileCount": 115,
    "unpackedSize": 2188794,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdHOwdCRA9TVsSAnZWagAAr+wP/3t8CI0xILGNlJfE9orL\nbfW3sYKBxHXDAeRHe38WD1ugSC8hi+EEFqCYlMeprcP8R6R4pz2l7RybLio6\nKaHx6VHaPLjeuwkjp5183XJUDIaRY8fhSecHN3Xp8v+GpIINdsH0mUpi24tP\n/4KFIp3TgVs7sAZzOSnP8XpcTbjPC2ajL+20SHpkD0iLyZXB0Qd87yMuk8aQ\nYfy3ha1ObdaZHlqhjRSPZlBhRn2JzWlhEDN40Kw4pxVl6PVrJIqewjgLgoad\nQB1i1CDrwkLEpj8wUIqyJwq06Qyu9Iwl2mBjczxlxnIQG4Mgn88klWxHc4kT\nutyDmHLH0FIqqsSPZehBAfgSnuDp4mjs9IMHMN4756W3P1lqI2RVDBrTsk8h\nzxjMrGzTNriUZf7UxouLK3P2DHfpfjbWJqdetju0WEZF5xvPQGb+M05awI7S\nzXqnFQpRJ1Kpuus4RBmMFYC/lyPLSp0OiHTDNKqnUAhob+/fejoJ5zjPBB4t\nSS84hF2sTBlTYiKcKLXccjpOLxKvcod+AEmtQmbyqu9QbMIp5K63X4C4q/Xm\nHzjL31cLscNycL9u0+YcZKYCOyeZ9IumUSWIL4D6B46jTxDTXLmZ8gvv9HvG\njT7bsmbI0qgxh7Yoa8yWUqZVtZAlgzHWpn+neQuHvLX5asO2OWvDDTPvN0v4\nziNX\r\n=HmRn\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "directories": {}
}
